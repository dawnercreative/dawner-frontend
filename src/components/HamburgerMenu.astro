---
export interface HamburgerMenuProps {
  menu: any;
}

const { menu: Menu } = Astro.props as HamburgerMenuProps;
---

<>
  <slot />
  <Menu id="menu" />
</>

<script is:inline>
  const addListeners = () => {
    const menu = document.querySelector('#menu');
    const hamburger = document.querySelector('#hamburger');

    const menuClassChangeHandler = new MutationObserver((mutationsList) => {
      for (let mutation of mutationsList) {
        console.log({ mutation });
        if (
          mutation.type === 'attributes' &&
          mutation.attributeName === 'class'
        ) {
          if (mutation.target.classList.contains('expanded')) {
            addExpandedListeners();
          } else {
            hamburgerListener();
          }
        }
      }
    });

    menuClassChangeHandler.observe(menu, { attributes: true });

    const toggleMenu = (isOpen) => {
      if (menu.classList.contains('expanded') && !isOpen) {
        menu.classList.toggle('expanded');
      } else if (!menu.classList.contains('expanded') && isOpen) {
        menu.classList.toggle('expanded');
      }
    };

    const addExpandedListeners = () => {
      const closeButton = document.querySelector('#close-nav');
      closeButton.addEventListener('click', () => {
        toggleMenu(false);
      });
      document.addEventListener('keydown', (event) => {
        if (event.key === 'Escape') {
          console.log('Escape key pressed');
          toggleMenu(false);
        }
      });
    };

    const hamburgerListener = () => {
      document.addEventListener('keydown', (event) => {
        if (event.key === 'Enter') {
          toggleMenu(true);
        }
      });
      hamburger.addEventListener('click', () => {
        toggleMenu(true);
      });
    };
    hamburgerListener();
  };

  ['DOMContentLoaded', 'astro:after-swap'].forEach((event) => {
    console.log('adding listener');
    document.addEventListener(event, addListeners);
  });
</script>
